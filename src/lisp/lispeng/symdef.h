/*######     Copyright (c) 1997-2012 Ufasoft  http://ufasoft.com  mailto:support@ufasoft.com    ##########################################
# This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published #
# by the Free Software Foundation; either version 3, or (at your option) any later version. This program is distributed in the hope that #
# it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. #
# See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this #
# program; If not, see <http://www.gnu.org/licenses/>                                                                                    #
########################################################################################################################################*/
// $ EXT  without first
// % SYS    ^ - if without first
// # CLOS  without first
// : KEYWORD
// @ GRAY  without first
// ~ CUSTOM without first
// ! CFFI-SYS

#define K_SPECIAL_ALLOW_OTHER_KEYS "\xFF" // can be last
#define L_K_SPECIAL_ALLOW_OTHER_KEYS 0xFF

LSYM("NIL",							L_NIL )
LSYM("T",								L_T	)

LSYM(":KEY",							L_K_KEY = 2 )
#define K_KEY "\x02"

LSYM(":TEST",						L_K_TEST = 3 )
#define K_TEST "\x03"

LSYM(":TEST-NOT",  			L_K_TEST_NOT = 4 )
#define K_TEST_NOT "\x04"

LSYM(":INITIAL-ELEMENT", L_K_INITIAL_ELEMENT = 5 )
#define K_INITIAL_ELEMENT "\x05"

LSYM(":START",						L_K_START = 6 )
#define K_START "\x06"

LSYM(":END",							L_K_END = 7 )
#define K_END "\x07"

LSYM(":FROM-END",					L_K_FROM_END	= 8 )
#define K_FROM_END "\x08"

LSYM(":COUNT",						L_K_COUNT	= 9 )
#define K_COUNT "\x09"

LSYM(":TYPE",						L_K_TYPE = 10 )
#define K_TYPE "\x0A"

LSYM(":IDENTITY",						L_K_IDENTITY	= 11 )
#define K_IDENTITY "\x0B"

LSYM(":APPEND",					L_K_APPEND = 12 )
LSYM(":OVERWRITE",				L_K_OVERWRITE = 13 )
LSYM(":EXECUTE",					L_K_EXECUTE = 14 )
LSYM(":COMPILE-TOPLEVEL", L_K_COMPILE_TOPLEVEL = 15 )

LSYM(":ARRAY",		L_K_ARRAY = 0x10 ) // Aligned, order important
#define K_ARRAY "\x10"

LSYM(":BASE",			L_K_BASE)
#define K_BASE "\x11"

LSYM(":CASE",			L_K_CASE)
#define K_CASE "\x12"

LSYM(":CIRCLE",		L_K_CIRCLE)
#define K_CIRCLE "\x13"

LSYM(":ESCAPE",		L_K_ESCAPE)
#define K_ESCAPE "\x14"

LSYM(":GENSYM",		L_K_GENSYM)
#define K_GENSYM "\x15"

LSYM(":LENGTH",		L_K_LENGTH)
#define K_LENGTH "\x16"

LSYM(":LEVEL",		L_K_LEVEL)
#define K_LEVEL "\x17"

LSYM(":LINES",		L_K_LINES)
#define K_LINES "\x18"

LSYM(":MISER-WIDTH", L_K_MISER_WIDTH)
#define K_MISER_WIDTH "\x19"

LSYM(":PPRINT-DISPATCH", L_K_PPRINT_DISPATCH)
#define K_PPRINT_DISPATCH "\x1A"

LSYM(":PRETTY",		L_K_PRETTY)
#define K_PRETTY "\x1B"

LSYM(":RADIX",		L_K_RADIX)
#define K_RADIX "\x1C"

LSYM(":READABLY",	L_K_READABLY)
#define K_READABLY "\x1D"

LSYM(":RIGHT-MARGIN", L_K_RIGHT_MARGIN)
#define K_RIGHT_MARGIN "\x1E"

LSYM(":DEFAULT",	L_K_DEFAULT)
#define K_DEFAULT "\x1F"

LSYM("*PRINT-ARRAY*",		L_S_PRINT_ARRAY = 0x20) // Aligned, order same as L_K_*
LSYM("*PRINT-BASE*",		L_S_PRINT_BASE)
LSYM("*PRINT-CASE*",		L_S_PRINT_CASE)
LSYM("*PRINT-CIRCLE*",	L_S_PRINT_CIRCLE)
LSYM("*PRINT-ESCAPE*",	L_S_PRINT_ESCAPE)
LSYM("*PRINT-GENSYM*",	L_S_PRINT_GENSYM)
LSYM("*PRINT-LENGTH*",	L_S_PRINT_LENGTH)
LSYM("*PRINT-LEVEL*",		L_S_PRINT_LEVEL)
LSYM("*PRINT-LINES*",		L_S_PRINT_LINES)
LSYM("*PRINT-MISER-WIDTH*",	L_S_PRINT_MISER_WIDTH)
LSYM("*PRINT-PPRINT-DISPATCH*",	L_S_PRINT_PPRINT_DISPATCH)
LSYM("*PRINT-PRETTY*",	L_S_PRINT_PRETTY)
LSYM("*PRINT-RADIX*",		L_S_PRINT_RADIX)
LSYM("*PRINT-READABLY*", L_S_PRINT_READABLY)
LSYM("*PRINT-RIGHT-MARGIN*",	L_S_PRINT_RIGHT_MARGIN)
LSYM("~*PRINT-CLOSURE*",	L_S_PRINT_CLOSURE)

LSYM(":STREAM",	L_K_STREAM = 0x30)
#define K_STREAM "\x30"

LSYM(":ABORT",	L_K_ABORT = 0x31)
#define K_ABORT "\x31"

LSYM(":DIRECTION",				L_K_DIRECTION = 0x32)
#define							K_DIRECTION		"\x32"

LSYM(":ELEMENT-TYPE",			L_K_ELEMENT_TYPE = 0x33)
#define							K_ELEMENT_TYPE "\x33"

LSYM(":IF-EXISTS",				L_K_IF_EXISTS = 0x34)
#define							K_IF_EXISTS "\x34"

LSYM(":IF-DOES-NOT-EXIST",		L_K_IF_DOES_NOT_EXIST = 0x35)
#define							K_IF_DOES_NOT_EXIST "\x35"

LSYM(":EXTERNAL-FORMAT",		L_K_EXTERNAL_FORMAT = 0x36)
#define							K_EXTERNAL_FORMAT "\x36"

LSYM(":INITIAL-CONTENTS",		L_K_INITIAL_CONTENTS = 0x37)
#define							K_INITIAL_CONTENTS "\x37"

LSYM(":ADJUSTABLE",				L_K_ADJUSTABLE = 0x38)
#define							K_ADJUSTABLE "\x38"

LSYM(":FILL-POINTER",			L_K_FILL_POINTER = 0x39)
#define							K_FILL_POINTER "\x39"

LSYM(":DISPLACED-TO",			L_K_DISPLACED_TO = 0x3A)
#define							K_DISPLACED_TO "\x3A"

LSYM(":DISPLACED-INDEX-OFFSET",	L_K_DISPLACED_INDEX_OFFSET = 0x3B)
#define							K_DISPLACED_INDEX_OFFSET "\x3B"

LSYM(":NICKNAMES",				L_K_NICKNAMES = 0x3C)
#define							K_NICKNAMES "\x3C"

LSYM(":USE",					L_K_USE = 0x3D)
#define							K_USE "\x3D"

LSYM(":HOST",					L_K_HOST = 0x3E)
#define							K_HOST "\x3E"

LSYM(":DEVICE",					L_K_DEVICE = 0x3F)
#define							K_DEVICE "\x3F"

LSYM(":DIRECTORY",				L_K_DIRECTORY = 0x40)
#define							K_DIRECTORY "\x40"

LSYM(":NAME",					L_K_NAME = 0x41)
#define							K_NAME "\x41"

LSYM(":VERSION",				L_K_VERSION = 0x42)
#define							K_VERSION "\x42"

LSYM(":DEFAULTS",				L_K_DEFAULTS = 0x43)
#define							K_DEFAULTS "\x43"

LSYM(":JUNK-ALLOWED",			L_K_JUNK_ALLOWED = 0x44)
#define							K_JUNK_ALLOWED "\x44"

LSYM(":LOGICAL",				L_K_LOGICAL = 0x45)
#define							K_LOGICAL "\x45"

LSYM(":REHASH-SIZE",			L_K_REHASH_SIZE = 0x46)
#define							K_REHASH_SIZE "\x46"

LSYM(":REHASH-THRESHOLD",		L_K_REHASH_THRESHOLD = 0x47)
#define							K_REHASH_THRESHOLD "\x47"

LSYM(":KEY-TYPE",				L_K_KEY_TYPE = 0x48)
#define							K_KEY_TYPE "\x48"

LSYM(":VALUE-TYPE",				L_K_VALUE_TYPE = 0x49)
#define							K_VALUE_TYPE "\x49"

LSYM(":WARN-IF-NEEDS-REHASH-AFTER-GC",	L_K_WARN_IF_NEEDS_REHASH_AFTER_GC = 0x4A)
#define							K_WARN_IF_NEEDS_REHASH_AFTER_GC "\x4A"

LSYM(":WEAK",					L_K_WEAK = 0x4B)
#define							K_WEAK "\x4B"

LSYM(":SIZE",					L_K_SIZE = 0x4C)
#define							K_SIZE "\x4C"

LSYM(":VERBOSE",				L_K_VERBOSE = 0x4D)
#define							K_VERBOSE "\x4D"

#if UCFG_LISP_FFI

	LSYM(":LIBRARY",				L_K_LIBRARY = 0x4E)
	#define							K_LIBRARY "\x4E"

	LSYM(":CALLING-CONVENTION",		L_K_CALLING_CONVENTION = 0x4F)
	#define							K_CALLING_CONVENTION "\x4F"

#endif //UCFG_LISP_FFI

LSYM(":ALLOW-OTHER-KEYS",		L_K_ALLOW_OTHER_KEYS)
LSYM(":DATUM",					L_K_DATUM)
LSYM(":EXPECTED-TYPE",			L_K_EXPECTED_TYPE)
LSYM(":IO",						L_K_IO)
LSYM(":ERROR",					L_K_ERROR)
LSYM(":INPUT",					L_K_INPUT)
LSYM(":INPUT-IMMUTABLE",		L_K_INPUT_IMMUTABLE)
LSYM(":OUTPUT",					L_K_OUTPUT)
LSYM(":PROBE",					L_K_PROBE)
LSYM(":NEWEST",					L_K_NEWEST)
LSYM(":CREATE",					L_K_CREATE)
LSYM(":UPCASE",					L_K_UPCASE)
LSYM(":DOWNCASE",				L_K_DOWNCASE)
LSYM(":PRESERVE",				L_K_PRESERVE)
LSYM(":INVERT",					L_K_INVERT)
LSYM(":CAPITALIZE",				L_K_CAPITALIZE)
LSYM(":LAMBDA",					L_K_LAMBDA)
LSYM(":EOF",					L_K_EOF)
LSYM(":EXTERNAL",				L_K_EXTERNAL)
LSYM(":INTERNAL",				L_K_INTERNAL)
LSYM(":INHERITED",				L_K_INHERITED)
LSYM(":PACKAGE",				L_K_PACKAGE)
LSYM(":PATHNAME",				L_K_PATHNAME)
LSYM(":ABSOLUTE",				L_K_ABSOLUTE)
LSYM(":LOCAL",					L_K_LOCAL)
LSYM(":COMMON",					L_K_COMMON)
LSYM(":RELATIVE",				L_K_RELATIVE)
LSYM(":WILD",					L_K_WILD)
LSYM(":WILD-INFERIORS",			L_K_WILD_INFERIORS)
LSYM(":UP",						L_K_UP)
LSYM(":BACK",					L_K_BACK)
LSYM(":OUTPUT-FILE",			L_K_OUTPUT_FILE)
LSYM(":FILL",					L_K_FILL)
LSYM(":BLOCK",					L_K_BLOCK)
LSYM(":CURRENT",				L_K_CURRENT)
LSYM(":LINEAR",					L_K_LINEAR)
LSYM(":MISER",					L_K_MISER)
LSYM(":MANDATORY",				L_K_MANDATORY)
LSYM(":NEW-VERSION",			L_K_NEW_VERSION)
LSYM(":RENAME",					L_K_RENAME)
LSYM(":RENAME-AND-DELETE",		L_K_RENAME_AND_DELETE)
LSYM(":SUPERSEDE",				L_K_SUPERSEDE)
LSYM(":UNSPECIFIC",				L_K_UNSPECIFIC)
LSYM(":WIN32",					L_K_WIN32)
LSYM(":OPERATION",				L_K_OPERATION)
LSYM(":OPERANDS",				L_K_OPERANDS)
LSYM(":DATA",					L_K_DATA)
LSYM(":IEEE-FLOATING-POINT",  	L_K_IEEE_FLOATING_POINT)

LSYM("$*EVALHOOK*",					L_S_EVALHOOK)
LSYM("$*APPLYHOOK*",				L_S_APPLYHOOK)
LSYM("*MACROEXPAND-HOOK*",			L_S_MACROEXPAND_HOOK)
LSYM("&OPTIONAL",					L_OPTIONAL)
LSYM("&KEY",						L_KEY)
LSYM("&ALLOW-OTHER-KEYS",			L_ALLOW_OTHER_KEYS)
LSYM("&AUX",						L_AUX)
LSYM("&BODY",						L_BODY)
LSYM("&WHOLE",						L_WHOLE)
LSYM("*PACKAGE*",					L_S_PACKAGE)
LSYM("*GENSYM-COUNTER*",			L_S_GENSYM_COUNTER)
LSYM("*READTABLE*",					L_S_READTABLE)
LSYM("*READ-BASE*",					L_S_READ_BASE)
LSYM("*READ-SUPPRESS*",				L_S_READ_SUPPRESS)
LSYM("^*READ-REFERENCE-TABLE*",		L_S_READ_REFERENCE_TABLE)
LSYM("*READ-EVAL*",					L_S_READ_EVAL)
LSYM("*FEATURES*",					L_S_FEATURES)
LSYM("*RANDOM-STATE*",				L_S_RANDOM_STATE)
LSYM("*STANDARD-INPUT*",			L_S_STANDARD_INPUT)
LSYM("*STANDARD-OUTPUT*",			L_S_STANDARD_OUTPUT)
LSYM("*ERROR-OUTPUT*",				L_S_ERROR_OUTPUT)
LSYM("*TRACE-OUTPUT*",				L_S_TRACE_OUTPUT)
LSYM("*DEBUG-IO*",					L_S_DEBUG_IO)
LSYM("*QUERY-IO*",					L_S_QUERY_IO)
LSYM("*TERMINAL-IO*",				L_S_TERMINAL_IO)
LSYM("*LOAD-VERBOSE*",				L_S_LOAD_VERBOSE)
LSYM("QUOTE",						L_QUOTE)
LSYM("^BACKQUOTE",					L_BACKQUOTE)
LSYM("^UNQUOTE",					L_UNQUOTE)
LSYM("^SPLICE",						L_SPLICE)
LSYM("^NSPLICE",					L_NSPLICE)
LSYM("^BQ-NCONC",					L_BQ_NCONC)
LSYM("FUNCTION",					L_FUNCTION)
LSYM("&REST",						L_REST)
LSYM("EQ",							L_EQ)
LSYM("EQL",							L_EQL)
LSYM("EQUAL",						L_EQUAL)
LSYM("EQUALP",						L_EQUALP)
LSYM("SETF",						L_SETF)
LSYM("BLOCK",						L_BLOCK)
LSYM("LAMBDA",						L_LAMBDA)
LSYM("ATOM",						L_ATOM)
LSYM("SYMBOL",						L_SYMBOL)
LSYM("CONS",						L_CONS)
LSYM("STRING",						L_STRING)
LSYM("CHARACTER",					L_CHARACTER)
LSYM("RATIONAL",					L_RATIONAL)
LSYM("FIXNUM",						L_FIXNUM)
LSYM("BIGNUM",						L_BIGNUM)
LSYM("SINGLE-FLOAT",				L_SINGLE_FLOAT)
LSYM("VECTOR",						L_VECTOR)
LSYM("ARRAY",						L_ARRAY)
LSYM("GOTO",						L_GOTO)
LSYM("RETURN",						L_RETURN)
LSYM("MAP",							L_MAP)
LSYM("IDENTITY",					L_IDENTITY)
LSYM("NCONC",						L_NCONC)
LSYM("EVAL",						L_EVAL)
LSYM("*",							L_ASTERISK)
//!!!R LSYM("/",							L_DIVIDE)
LSYM("COMPILED-FUNCTION",			L_COMPILED_FUNCTION)
LSYM("COMPILE-FILE",				L_COMPILE_FILE)
LSYM("^COMPILE-LAMBDA",				L_COMPILE_LAMBDA)
LSYM("^COMPILE-FORM",				L_COMPILE_FORM)
LSYM("^_SUBR",						L_SUBR)
LSYM("$SPECIAL-OPERATOR",			L_SPECIAL_OPERATOR)
LSYM("KEYWORD",						L_KEYWORD)
LSYM("^STRUCT",						L_STRUCT)
LSYM("RATIO",						L_RATIO)
LSYM("REAL",						L_REAL)
LSYM("INTEGER",						L_INTEGER)
LSYM("FLOAT",						L_FLOAT)
LSYM("NUMBER",						L_NUMBER)
LSYM("NULL",						L_NULL)
LSYM("BOOLEAN",						L_BOOLEAN)
LSYM("PACKAGE",						L_PACKAGE)
LSYM("STREAM",						L_STREAM)
LSYM("SYNONYM-STREAM",				L_SYNONYM_STREAM)
LSYM("TWO-WAY-STREAM",				L_TWO_WAY_STREAM)
LSYM("STRING-STREAM",				L_STRING_STREAM)
LSYM("FILE-STREAM",					L_FILE_STREAM)
LSYM("CONCATENATED-STREAM",			L_CONCATENATED_STREAM)
LSYM("BROADCAST-STREAM",			L_BROADCAST_STREAM)
LSYM("ECHO-STREAM",					L_ECHO_STREAM)
LSYM("BASES",						L_BASES)
LSYM("OR",							L_OR)
LSYM("AND",							L_AND)
LSYM("NOT",							L_NOT)
LSYM(":OR",							L_K_OR)
LSYM(":AND",						L_K_AND)
LSYM(":NOT",						L_K_NOT)
LSYM("MEMBER",						L_MEMBER)
LSYM("LIST",						L_LIST)
LSYM("SETQ",						L_SETQ)
LSYM("AREF",						L_AREF)
LSYM("APPLY",						L_APPLY)
LSYM("FUNCALL",						L_FUNCALL)
LSYM("&ENVIRONMENT",				L_ENVIRONMENT)
LSYM("^*_TRACE*",					L_S_TRACE)
LSYM("OBJECT",						L_OBJECT)
LSYM("PROGN",						L_PROGN)
LSYM("THROW",						L_THROW)
LSYM("READTABLE",					L_READTABLE)
LSYM("HASH-TABLE",					L_HASH_TABLE)
LSYM("^SETF-FUNCTION",				L_SETF_FUNCTION)
LSYM("DECLARE",						L_DECLARE)
LSYM("COMPILE",						L_COMPILE)
LSYM("SPECIAL",						L_SPECIAL)
LSYM("$NOTSPECIAL",					L_NOTSPECIAL)
LSYM("INLINE",						L_INLINE)
LSYM("NOTINLINE",					L_NOTINLINE)
LSYM("^INLINABLE",					L_INLINABLE)
LSYM("SIGNED-BYTE",					L_SIGNED_BYTE)
LSYM("UNSIGNED-BYTE",				L_UNSIGNED_BYTE)
LSYM("$SYMBOL-MACRO",				L_SYMBOL_MACRO)
LSYM("$GLOBAL-SYMBOL-MACRO",		L_GLOBAL_SYMBOL_MACRO)
LSYM("MACROLET",					L_MACROLET)
LSYM("SYMBOL-MACROLET",				L_SYMBOL_MACROLET)
LSYM("DECLARATION",					L_DECLARATION)
LSYM("LET",							L_LET)
LSYM("^MAKE-MACRO-EXPANDER",		L_MAKE_MACRO_EXPANDER)
LSYM("COMPLEX",						L_COMPLEX)
LSYM("PATHNAME",					L_PATHNAME)
LSYM("LOGICAL-PATHNAME",			L_LOGICAL_PATHNAME)


LSYM("MERGE-PATHNAMES",				L_MERGE_PATHNAMES)			// Functions, defined in .lisp
LSYM("UPGRADED-ARRAY-ELEMENT-TYPE",	L_UPGRADED_ARRAY_ELEMENT_TYPE)
LSYM("^_FILL-ARRAY-CONTENTS",	L_FILL_ARRAY_CONTENTS)

LSYM("BIT-VECTOR",					L_BIT_VECTOR)
LSYM("SIMPLE-VECTOR",				L_SIMPLE_VECTOR)
LSYM("BASE-CHAR",					L_BASE_CHAR)
LSYM("SIMPLE-BIT-VECTOR",			L_SIMPLE_BIT_VECTOR)
LSYM("SIMPLE-STRING",				L_SIMPLE_STRING)
LSYM("SIMPLE-BASE-STRING",			L_SIMPLE_BASE_STRING)
LSYM("SIMPLE-ARRAY",				L_SIMPLE_ARRAY)
LSYM("BASE-STRING",					L_BASE_STRING)
LSYM("RANDOM-STATE",				L_RANDOM_STATE)
LSYM("EXTENDED-CHAR",				L_EXTENDED_CHAR)
LSYM("STANDARD-CHAR",				L_STANDARD_CHAR)
LSYM("*DEFAULT-PATHNAME-DEFAULTS*",	L_S_DEFAULT_PATHNAME_DEFAULTS)
LSYM("#CLOSCLASS",					L_CLOSCLASS)
LSYM("STANDARD-GENERIC-FUNCTION",	L_STANDARD_GENERIC_FUNCTION)
LSYM("^MACRO",						L_MACRO)
LSYM("^SYMBOLMACRO",				L_SYMBOLMACRO)
LSYM("^SOURCE",						L_SOURCE)
LSYM("%EXPAND-LAMBDABODY-MAIN",		L_EXPAND_LAMBDABODY_MAIN)
LSYM("%FIND-SUBR",					L_FIND_SUBR)
LSYM("APPEND",						L_APPEND)
LSYM("OTHERWISE",					L_OTHERWISE)
LSYM("$*ERROR-HANDLER*",			L_S_ERROR_HANDLER)
LSYM("$*DRIVER*",					L_S_DRIVER)
LSYM("^SAFE-TYPEP",					L_SAFE_TYPEP)
LSYM("$*BREAK-DRIVER*",				L_S_BREAK_DRIVER)
LSYM("$SET-GLOBAL-HANDLER",			L_SET_GLOBAL_HANDLER)
LSYM("^GLOBAL-HANDLER",				L_GLOBAL_HANDLER)
LSYM("BIT",							L_BIT)
LSYM("$WEAK-POINTER",				L_WEAK_POINTER)
LSYM("SIGNAL",						L_SIGNAL)
LSYM("MAKE-CONDITION",				L_MAKE_CONDITION)
LSYM("LOAD",						L_LOAD)
LSYM("PSETF",						L_PSETF)
LSYM("SEQUENCE",					L_SEQUENCE)
LSYM("STANDARD-OBJECT",				L_STANDARD_OBJECT)
LSYM("STRUCTURE-OBJECT",			L_STRUCTURE_OBJECT)
LSYM("VECTOR-PUSH-EXTEND",			L_VECTOR_PUSH_EXTEND)

//----------------DO NOT INSERT ANY LINES LOWER------------same order as in conditions.clisp
LSYM("CONDITION",					L_CONDITION)
LSYM("SERIOUS-CONDITION",			L_SERIOUS_CONDITION)
LSYM("ERROR",						L_ERROR)
LSYM("PROGRAM-ERROR",				L_PROGRAM_ERROR)
LSYM("$SOURCE-PROGRAM-ERROR",		L_SOURCE_PROGRAM_ERROR)
LSYM("CONTROL-ERROR",				L_CONTROL_ERROR)
LSYM("ARITHMETIC-ERROR",			L_ARITHMETIC_ERROR)
LSYM("DIVISION-BY-ZERO",			L_DIVISION_BY_ZERO)
LSYM("FLOATING-POINT-OVERFLOW",		L_FLOATING_POINT_OVERFLOW)
LSYM("FLOATING-POINT-UNDERFLOW",	L_FLOATING_POINT_UNDERFLOW)
LSYM("CELL-ERROR",					L_CELL_ERROR)
LSYM("UNBOUND-VARIABLE",			L_UNBOUND_VARIABLE)
LSYM("UNDEFINED-FUNCTION",			L_UNDEFINED_FUNCTION)
LSYM("UNBOUND-SLOT",				L_UNBOUND_SLOT)
LSYM("TYPE-ERROR",					L_TYPE_ERROR)
LSYM("^KEYWORD-ERROR",				L_KEYWORD_ERROR)
LSYM("^CHARSET-TYPE-ERROR",			L_CHARSET_TYPE_ERROR)
LSYM("^ARGUMENT-LIST-DOTTED",		L_ARGUMENT_LIST_DOTTED)
LSYM("PACKAGE-ERROR",				L_PACKAGE_ERROR)
LSYM("PRINT-NOT-READABLE",			L_PRINT_NOT_READABLE)
LSYM("PARSE-ERROR",					L_PARSE_ERROR)
LSYM("STREAM-ERROR",				L_STREAM_ERROR)
LSYM("END-OF-FILE",					L_END_OF_FILE)
LSYM("READER-ERROR",				L_READER_ERROR)
LSYM("FILE-ERROR",					L_FILE_ERROR)
LSYM("$OS-ERROR",					L_OS_ERROR)
LSYM("STORAGE-CONDITION",			L_STORAGE_CONDITION)
LSYM("^INTERRUPT-CONDITION",		L_INTERRUPT_CONDITION)
LSYM("WARNING",						L_WARNING)
//----------------DO NOT INSERT ANY LINES UPPER------------

LSYM("CERROR",						L_CERROR)
//!!!R LSYM("ABS",							L_ABS)
LSYM("^APPEASE-CERROR",				L_APPEASE_CERROR)
LSYM("^EXITUNCONDITIONALLY",		L_EXITUNCONDITIONALLY)
LSYM("^EXITONERROR",				L_EXITONERROR)
LSYM("PRINT-DISPATCH",				L_PPRINT_DISPATCH)
LSYM("^*PRINT-CIRCLE-TABLE*",		L_S_PRINT_CIRCLE_TABLE)
LSYM("^*PRIN-LEVEL*",				L_S_PRIN_LEVEL)
LSYM("^*PRIN-BQLEVEL*",				L_S_PRIN_BQLEVEL)
LSYM("^MAKE-TRAMPOLINE",			L_MAKE_TRAMPOLINE)
LSYM("SLOT-VALUE",					L_SLOT_VALUE)
LSYM("SLOT-MISSING",				L_SLOT_MISSING)
LSYM("SLOT-BOUNDP",					L_SLOT_BOUNDP)
LSYM("SLOT-MAKUNBOUND",				L_SLOT_MAKUNBOUND)
LSYM("SLOT-UNBOUND",				L_SLOT_UNBOUND)
LSYM("UPDATE-INSTANCE-FOR-REDEFINED-CLASS",	L_UPDATE_INSTANCE_FOR_REDEFINED_CLASS)
LSYM("#*CLASS-VERSION-STANDARD-CLASS*",		L_S_CLASS_VERSION_STANDARD_CLASS)
LSYM("#*CLASS-VERSION-STRUCTURE-CLASS*",	L_S_CLASS_VERSION_STRUCTURE_CLASS)
LSYM("#*CLASS-BUILT-IN-STANDARD_CLASS*",	L_S_CLASS_BUILT_IN_STANDARD_CLASS)
LSYM("#CLASS-VERSION-COMPUTE-SLOTLISTS",	L_CLASS_VERSION_COMPUTE_SLOTLISTS)
LSYM("#*CLASS-POTENTIAL-CLASS*",	L_S_CLASS_POTENTIAL_CLASS)
LSYM("#*CLASS-DEFINED-CLASS*",		L_S_CLASS_DEFINED_CLASS)
LSYM("^*ENDLESS-LOOP-CODE*",		L_S_ENDLESS_LOOP_CODE)
LSYM("#FINALIZE-INHERITANCE",		L_FINALIZE_INHERITANCE)
LSYM("$FUNCTION-MACRO",				L_FUNCTION_MACRO)
LSYM("^MAKE-FUNMACRO-EXPANDER",		L_MAKE_FUNMACRO_EXPANDER)
LSYM("^DEFTYPE-EXPANDER",			L_DEFTYPE_EXPANDER)
LSYM("^*_SEQ-TYPES*",				L_S_SEQ_TYPES)
LSYM("^<FUNDAMENTAL-STREAM>",		L_S_FUNDAMENTAL_STREAM)
LSYM("^<FUNDAMENTAL-INPUT-STREAM>",	L_S_FUNDAMENTAL_INPUT_STREAM)
LSYM("^<FUNDAMENTAL-OUTPUT-STREAM>", L_S_FUNDAMENTAL_OUTPUT_STREAM)
LSYM("%TYPE-INPUT-STREAM",			L_S_TYPE_INPUT_STREAM)
LSYM("%TYPE-OUTPUT-STREAM",			L_S_TYPE_OUTPUT_STREAM)
LSYM("STREAM-ELEMENT-TYPE",			L_STREAM_ELEMENT_TYPE)
LSYM("@STREAM-LINE-COLUMN",			L_STREAM_LINE_COLUMN)
LSYM("@STREAM-POSITION",			L_STREAM_POSITION)
LSYM("@STREAM-READ-BYTE",			L_STREAM_READ_BYTE)
LSYM("@STREAM-WRITE-BYTE",			L_STREAM_WRITE_BYTE)
LSYM("@STREAM-READ-CHAR",			L_STREAM_READ_CHAR)
LSYM("@STREAM-WRITE-CHAR",			L_STREAM_WRITE_CHAR)
LSYM("@STREAM-UNREAD-CHAR",			L_STREAM_UNREAD_CHAR)
LSYM("@STREAM-READ-CHAR-NO-HANG",	L_STREAM_READ_CHAR_NO_HANG)
LSYM("@STREAM-PEEK-CHAR",			L_STREAM_PEEK_CHAR)
LSYM("@STREAM-FINISH-OUTPUT",		L_STREAM_FINISH_OUTPUT)
LSYM("@STREAM-FORCE-OUTPUT",		L_STREAM_FORCE_OUTPUT)
LSYM("@STREAM-CLEAR-OUTPUT",		L_STREAM_CLEAR_OUTPUT)
LSYM("@STREAM-CLEAR-INPUT",			L_STREAM_CLEAR_INPUT)
LSYM("@STREAM-LISTEN",				L_STREAM_LISTEN)
LSYM("TYPEP",						L_TYPEP)
LSYM("SUBTYPEP",					L_SUBTYPEP)
LSYM("^SUBTYPE-SEQUENCE",			L_SUBTYPE_SEQUENCE)
LSYM("^SUBTYPE-INTEGER",			L_SUBTYPE_INTEGER)
LSYM("PRINT-OBJECT",				L_PRINT_OBJECT)
LSYM("^_PRINT",						L_SYS_PRINT)
LSYM("^CONSTANT-INITFUNCTION",		L_CONSTANT_INITFUNCTION)
LSYM("^*CONSTANT-INITFUNCTION-CODE*",	L_S_CONSTANT_INITFUNCTION_CODE)
LSYM("#INITIAL-MAKE-INSTANCE",		L_INITIAL_MAKE_INSTANCE)
LSYM("#MAKE-INIT-FORM",				L_MAKE_INIT_FORM)
LSYM("#*MAKE-INSTANCE-TABLE*",		L_S_MAKE_INSTANCE_TABLE)
LSYM("^TRACED-DEFINITION",			L_TRACED_DEFINITION)
LSYM("NAMESTRING",					L_NAMESTRING)
LSYM("PRIN1",						L_PRIN1)
LSYM("ROUND",						L_ROUND)
LSYM("GCD",							L_GCD)
LSYM("MULTIPLE-VALUES-LIMIT",		L_MULTIPLE_VALUES_LIMIT)
LSYM("MOST-POSITIVE-FIXNUM",		L_MOST_POSITIVE_FIXNUM)
LSYM("SINGLE-FLOAT-EPSILON",		L_SINGLE_FLOAT_EPSILON)
LSYM("SINGLE-FLOAT-NEGATIVE-EPSILON",	L_SINGLE_FLOAT_NEGATIVE_EPSILON)
LSYM("MOST-POSITIVE-SINGLE-FLOAT",	L_MOST_POSITIVE_SINGLE_FLOAT)
LSYM("LEAST-POSITIVE-SINGLE-FLOAT",	L_LEAST_POSITIVE_SINGLE_FLOAT)
LSYM("MOST-NEGATIVE-SINGLE-FLOAT",	L_MOST_NEGATIVE_SINGLE_FLOAT)
LSYM("LEAST-NEGATIVE-SINGLE-FLOAT",	L_LEAST_NEGATIVE_SINGLE_FLOAT)
LSYM("LEAST-POSITIVE-NORMALIZED-SINGLE-FLOAT",	L_LEAST_POSITIVE_NORMALIZED_SINGLE_FLOAT)
LSYM("LEAST-NEGATIVE-NORMALIZED-SINGLE-FLOAT",	L_LEAST_NEGATIVE_NORMALIZED_SINGLE_FLOAT)
LSYM("INTERNAL-TIME-UNITS-PER-SECOND",	L_INTERNAL_TIME_UNITS_PER_SECOND)
LSYM("PI",							L_PI)
LSYM("SQRT",						L_SQRT)
LSYM("EXPT",						L_EXPT)
LSYM("IMPORT",						L_IMPORT)
LSYM("IGNORE",						L_IGNORE)
LSYM("TERPRI",						L_TERPRI)
LSYM("NAME-CHAR",					L_NAME_CHAR)
LSYM("^*PRIN-INDENTATION*",			L_S_PRIN_INDENTATION)
LSYM("^*PRINT-PRETTY-FILL*",		L_S_PRINT_PRETTY_FILL)
LSYM("^*PRIN-LINELENGTH*",			L_S_PRIN_LINELENGTH)
LSYM("^*PRIN-L1*",					L_S_PRIN_L1)
LSYM("^*PRIN-LM*",					L_S_PRIN_LM)
LSYM("^*PRIN-TRAILLENGTH*",			L_S_PRIN_TRAILLENGTH)
LSYM("^*PRIN-PREV-TRAILLENGTH*",	L_S_PRIN_PREV_TRAILLENGTH)
LSYM("^*PRIN-JBLOCKS*",				L_S_PRIN_JBLOCKS)
LSYM("^*PRIN-JBSTRINGS*",			L_S_PRIN_JBSTRINGS)
LSYM("^*PRIN-LINE-PREFIX*",			L_S_PRIN_LINE_PREFIX)
LSYM("^*PRIN-LINES*",				L_S_PRIN_LINES)
LSYM("^*PRIN-PPRINTER*",			L_S_PRIN_PPRINTER)
LSYM("^*PRIN-MISERP*",				L_S_PRIN_MISERP)
LSYM("^*PRIN-STREAM*",				L_S_PRIN_STREAM)
LSYM("^*COMPILING*",				L_S_COMPILING)
LSYM("^*LOAD-FORMS*",				L_S_LOAD_FORMS)
LSYM("^*TERMINAL-READ-OPEN_OBJECT*",	L_S_TERMINAL_READ_OPEN_OBJECT)
LSYM("^*TERMINAL-READ-STREAM*",		L_S_TERMINAL_READ_STREAM)
LSYM("$STACK-OVERFLOW-ERROR",		L_STACK_OVERFLOW_ERROR)
LSYM("^*LOGICAL-PATHNAME-TRANSLATIONS*",	L_S_LOGICAL_PATHNAME_TRANSLATIONS)
LSYM("^*_STANDARD-READTABLE*",     	L_S_STANDARD_READTABLE)
LSYM("^*_CONDS*",					L_S_CONDS)

LSYM("^FORMAT-TAB",					L_FORMAT_TAB)
LSYM("FORMAT",						L_FORMAT)
LSYM("^COERCE-TO-CONDITION-EX",		L_COERCE_TO_CONDITION_EX)
LSYM("^CORRECTABLE-ERROR-EX",		L_CORRECTABLE_ERROR_EX)
LSYM("^CERROR-OF-TYPE",				L_CERROR_OF_TYPE)
LSYM("^_MAKE-RANDOM_STATE",			L_SYS_MAKE_RANDOM_STATE)
LSYM("^_PRINT-PATHNAME",			L_PRINT_PATHNAME)
LSYM("^_TRACE-ENTER",				L_TRACE_ENTER)
LSYM("^_TRACE-EXIT",				L_TRACE_EXIT)
LSYM("^_DEFAULT-BREAK-DRIVER",		L_DEFAULT_BREAK_DRIVER)
LSYM("^GET-FUNNAME-SYMBOL",			L_GET_FUNNAME_SYMBOL)
LSYM("%THE",						L_PTHE)
LSYM("^TYPE-FOR-DISCRIMINATION",	L_TYPE_FOR_DISCRIMINATION)

#if UCFG_LISP_FFI
LSYM("!FOREIGN-POINTER",			L_FOREIGN_POINTER)
LSYM("!CALLBACK",					L_CALLBACK)
LSYM(":CDECL",						L_K_CDECL)
LSYM(":STDCALL",					L_K_STDCALL)

LSYM(":CHAR",						L_K_CHAR)
LSYM(":UNSIGNED-CHAR",				L_K_UNSIGNED_CHAR)
LSYM(":UCHAR",						L_K_UCHAR)

LSYM(":SHORT",						L_K_SHORT)
LSYM(":UNSIGNED-SHORT",				L_K_UNSIGNED_SHORT)
LSYM(":USHORT",						L_K_USHORT)

LSYM(":INT",						L_K_INT)
LSYM(":UNSIGNED-INT",				L_K_UNSIGNED_INT)
LSYM(":UINT",						L_K_UINT)

LSYM(":LONG",						L_K_LONG)
LSYM(":UNSIGNED-LONG",				L_K_UNSIGNED_LONG)
LSYM(":ULONG",						L_K_ULONG)

LSYM(":LONG-LONG",					L_K_LONG_LONG)
LSYM(":UNSIGNED-LONG-LONG",			L_K_UNSIGNED_LONG_LONG)
LSYM(":LLONG",						L_K_LLONG)
LSYM(":ULLONG",						L_K_ULLONG)

LSYM(":INT8",						L_K_INT8)
LSYM(":UINT8",						L_K_UINT8)
LSYM(":INT16",						L_K_INT16)
LSYM(":UINT16",						L_K_UINT16)
LSYM(":INT32",						L_K_INT32)
LSYM(":UINT32",						L_K_UINT32)
LSYM(":INT64",						L_K_INT64)
LSYM(":UINT64",						L_K_UINT64)

LSYM(":FLOAT",						L_K_FLOAT)
LSYM(":DOUBLE",						L_K_DOUBLE)
LSYM(":LONG-DOUBLE",				L_K_LONG_DOUBLE)

LSYM(":BOOLEAN",					L_K_BOOLEAN)
LSYM(":POINTER",					L_K_POINTER)
LSYM(":STRING",						L_K_STRING)
LSYM(":VOID",						L_K_VOID)
LSYM(":OBJECT",						L_K_OBJECT)

#endif //UCFG_LISP_FFI

LSYM("$GC",	L_S_GC)


